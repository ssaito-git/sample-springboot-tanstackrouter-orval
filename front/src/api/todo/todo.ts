/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateTodo,
  Todo,
  TodoList,
  UpdateTodo
} from '.././model'



/**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÂèñÂæó„Åô„Çã
 */
export const getTodo = (
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.get(
      `/api/todos/${todoId}`,options
    );
  }


export const getGetTodoQueryKey = (todoId: string,) => {
    return [`/api/todos/${todoId}`] as const;
    }

    
export const getGetTodoQueryOptions = <TData = Awaited<ReturnType<typeof getTodo>>, TError = AxiosError<void>>(todoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoQueryKey(todoId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodo>>> = ({ signal }) => getTodo(todoId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(todoId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTodoQueryResult = NonNullable<Awaited<ReturnType<typeof getTodo>>>
export type GetTodoQueryError = AxiosError<void>

/**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÂèñÂæó„Åô„Çã
 */
export const useGetTodo = <TData = Awaited<ReturnType<typeof getTodo>>, TError = AxiosError<void>>(
 todoId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTodoQueryOptions(todoId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTodoSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTodo>>, TError = AxiosError<void>>(todoId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoQueryKey(todoId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodo>>> = ({ signal }) => getTodo(todoId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(todoId), ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTodoSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTodo>>>
export type GetTodoSuspenseQueryError = AxiosError<void>

/**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÂèñÂæó„Åô„Çã
 */
export const useGetTodoSuspense = <TData = Awaited<ReturnType<typeof getTodo>>, TError = AxiosError<void>>(
 todoId: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTodoSuspenseQueryOptions(todoId,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const updateTodo = (
    todoId: string,
    updateTodo: UpdateTodo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.put(
      `/api/todos/${todoId}`,
      updateTodo,options
    );
  }



export const getUpdateTodoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTodo>>, TError,{todoId: string;data: UpdateTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateTodo>>, TError,{todoId: string;data: UpdateTodo}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateTodo>>, {todoId: string;data: UpdateTodo}> = (props) => {
          const {todoId,data} = props ?? {};

          return  updateTodo(todoId,data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type UpdateTodoMutationResult = NonNullable<Awaited<ReturnType<typeof updateTodo>>>
    export type UpdateTodoMutationBody = UpdateTodo
    export type UpdateTodoMutationError = AxiosError<void>

    /**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÊõ¥Êñ∞„Åô„Çã
 */
export const useUpdateTodo = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateTodo>>, TError,{todoId: string;data: UpdateTodo}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getUpdateTodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÂâäÈô§„Åô„Çã
 */
export const deleteTodo = (
    todoId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.delete(
      `/api/todos/${todoId}`,options
    );
  }



export const getDeleteTodoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError,{todoId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError,{todoId: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodo>>, {todoId: string}> = (props) => {
          const {todoId} = props ?? {};

          return  deleteTodo(todoId,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteTodoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodo>>>
    
    export type DeleteTodoMutationError = AxiosError<void>

    /**
 * @summary ÊåáÂÆö„Åó„Åü ID „ÅÆ Todo „ÇíÂâäÈô§„Åô„Çã
 */
export const useDeleteTodo = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError,{todoId: string}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getDeleteTodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Todo „ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const getTodoList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TodoList>> => {
    
    return axios.default.get(
      `/api/todos`,options
    );
  }


export const getGetTodoListQueryKey = () => {
    return [`/api/todos`] as const;
    }

    
export const getGetTodoListQueryOptions = <TData = Awaited<ReturnType<typeof getTodoList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoList>>> = ({ signal }) => getTodoList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTodoListQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoList>>>
export type GetTodoListQueryError = AxiosError<unknown>

/**
 * @summary Todo „ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetTodoList = <TData = Awaited<ReturnType<typeof getTodoList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTodoListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTodoListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getTodoList>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTodoListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodoList>>> = ({ signal }) => getTodoList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTodoListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getTodoList>>>
export type GetTodoListSuspenseQueryError = AxiosError<unknown>

/**
 * @summary Todo „ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetTodoListSuspense = <TData = Awaited<ReturnType<typeof getTodoList>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getTodoList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTodoListSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Todo „Çí‰ΩúÊàê„Åô„Çã
 */
export const createTodo = (
    createTodo: CreateTodo, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    
    return axios.default.post(
      `/api/todos`,
      createTodo,options
    );
  }



export const getCreateTodoMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTodo>>, TError,{data: CreateTodo}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createTodo>>, TError,{data: CreateTodo}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createTodo>>, {data: CreateTodo}> = (props) => {
          const {data} = props ?? {};

          return  createTodo(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateTodoMutationResult = NonNullable<Awaited<ReturnType<typeof createTodo>>>
    export type CreateTodoMutationBody = CreateTodo
    export type CreateTodoMutationError = AxiosError<void>

    /**
 * @summary Todo „Çí‰ΩúÊàê„Åô„Çã
 */
export const useCreateTodo = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createTodo>>, TError,{data: CreateTodo}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getCreateTodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    